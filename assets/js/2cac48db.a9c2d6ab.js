"use strict";(self.webpackChunkModDocCE=self.webpackChunkModDocCE||[]).push([[240],{1359:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"tutorials/dccm_dev","title":"Dynamic Core Modding with DCCM (For Developers)","description":"This is an advanced tutorial! If you\'re only looking to play mods made with DCCM, check this alternate, less technical tutorial","source":"@site/docs/tutorials/dccm_dev.md","sourceDirName":"tutorials","slug":"/tutorials/dccm_dev","permalink":"/ModDocCE/tutorials/dccm_dev","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Dynamic Core Modding with DCCM (For Players)","permalink":"/ModDocCE/tutorials/dccm_player"},"next":{"title":"Mobile","permalink":"/ModDocCE/category/mobile"}}');var t=o(4848),s=o(8453);const r={sidebar_position:4},d="Dynamic Core Modding with DCCM (For Developers)",l={},a=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"What is DCCM? How does it work?",id:"what-is-dccm-how-does-it-work",level:2},{value:"Installing DCCM",id:"installing-dccm",level:2},{value:"Game Directory",id:"game-directory",level:3},{value:"SDK",id:"sdk",level:3},{value:"Developing Mods",id:"developing-mods",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"dynamic-core-modding-with-dccm-for-developers",children:"Dynamic Core Modding with DCCM (For Developers)"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["This is an advanced tutorial! If you're only looking to play mods made with DCCM, check ",(0,t.jsx)(n.a,{href:"/ModDocCE/tutorials/dccm_player",children:"this alternate, less technical tutorial"})]})}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"This tutorial assumes you are familiar with the basics of programming and the command-line and are at least somewhat familiar with Hashlink, the VM that Dead Cells is compiled to. Other than the base game, you'll only need:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A .NET 9 SDK","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Optionally, you can install Visual Studio - this can be helpful with development but is, strictly speaking, not neccesary"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Git"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["This tutorial assumes you're on Windows. There's no provided prebuilt binaries of DCCM for Linux yet - but it ",(0,t.jsx)(n.em,{children:"should"})," be supported if you want to compile it yourself."]})}),"\n",(0,t.jsx)(n.h2,{id:"what-is-dccm-how-does-it-work",children:"What is DCCM? How does it work?"}),"\n",(0,t.jsx)(n.p,{children:"DCCM, or Dead Cells Core Modding, is a .NET-based modding framework for Dead Cells that works by hooking and injecting into a custom version of the Hashlink VM to allow mods to intercept and modify the behavior of various functions in the bytecode. It was written by HKLab - so major thanks to him!"}),"\n",(0,t.jsx)(n.h2,{id:"installing-dccm",children:"Installing DCCM"}),"\n",(0,t.jsx)(n.p,{children:"This will happen in two stages, since we're developing mods too - we need to copy the prebuilt mod runtime over our Dead Cells game directory, and then we need to install the SDK so we can access from other places."}),"\n",(0,t.jsx)(n.h3,{id:"game-directory",children:"Game Directory"}),"\n",(0,t.jsxs)(n.p,{children:["Open up your game directory in your favorite file explorer. Then, go download the ",(0,t.jsx)(n.a,{href:"https://github.com/dead-cells-core-modding/core/releases",children:"latest release of DCCM"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Make a subdirectory in the root of your game directory - call it ",(0,t.jsx)(n.code,{children:"coremod"}),". Unzip the contents of the DCCM release to that directory. It should look like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"<DeadCellsGameRoot>\r\n\u251c\u2500 coremod\r\n\u2502  \u251c\u2500 core\r\n\u2502  \u2502  \u251c\u2500 native\r\n\u2502  \u2502  \u2502  \u2514\u2500 \u2026\r\n\u2502  \u2502  \u251c\u2500 mdk\r\n\u2502  \u2502  \u2502  \u251c\u2500 install.ps1\r\n\u2502  \u2502  \u2502  \u251c\u2500 uninstall.ps1\r\n\u2502  \u2502  \u2502  \u2514\u2500 \u2026\r\n\u2502  \u2502  \u251c\u2500 host\r\n\u2502  \u2502  \u2502  \u251c\u2500 startup\r\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 DeadCellsModding.exe\r\n\u2502  \u2502  \u2502  \u2502  \u2514\u2500 \u2026\r\n\u2502  \u2502  \u2502  \u2514\u2500 \u2026\r\n\u2502  \u2502  \u2514\u2500 \u2026\r\n\u2502  \u2514\u2500 \u2026\r\n\u251c\u2500 deadcells.exe\r\n\u251c\u2500 deadcells_gl.exe\r\n\u2514\u2500 \u2026\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now, let's test and make sure it's functional. Find ",(0,t.jsx)(n.code,{children:"coremod/core/host/startup/DeadCellsModding.exe"})," and run it to launch the game."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["When launching the game from now on, if you run ",(0,t.jsx)(n.code,{children:"deadcells.exe"}),", the vanilla game will launch. Running the launcher in ",(0,t.jsx)(n.code,{children:"coremod/core/host/startup/"})," is the only way to launch the game modded."]})}),"\n",(0,t.jsx)(n.p,{children:"When you launch the game, you should see a new menu item labeled \"About Core Modding\". If you don't, then DCCM wasn't installed correctly."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Core modding",src:o(2677).A+"",width:"1100",height:"1338"})}),"\n",(0,t.jsx)(n.h3,{id:"sdk",children:"SDK"}),"\n",(0,t.jsxs)(n.p,{children:["Let's install the SDK now! Open ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"Powershell"})})," (Note: it needs to be Powershell and not ",(0,t.jsx)(n.code,{children:"cmd.exe"}),"!) in the game directory and run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ps1",children:"cd coremode\\core\\mdk\\\r\n.\\install.ps1\n"})}),"\n",(0,t.jsx)(n.p,{children:"This should output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-output",children:"Package source with Name: DeadCoreModdingMDK added successfully.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"developing-mods",children:"Developing Mods"}),"\n",(0,t.jsxs)(n.p,{children:["You should read ",(0,t.jsx)(n.a,{href:"https://dead-cells-core-modding.github.io/docs-en/docs/category/writing-your-first-mod/",children:"the official docs"})," for this one ;)"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},2677:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/menu-36f5a01a1f7f83a14a05b944a1ec8f79.png"},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>d});var i=o(6540);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);