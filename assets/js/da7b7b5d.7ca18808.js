"use strict";(self.webpackChunkModDocCE=self.webpackChunkModDocCE||[]).push([[737],{4280:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>x,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"files/save","title":"Save Files","description":"This is Dead Cells\' specific binary save file format. It stores multiple serialised objects in a compressed format along with hashes to prevent corruption or tampering.","source":"@site/docs/files/save.md","sourceDirName":"files","slug":"/files/save","permalink":"/ModDocCE/files/save","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"HashLink bytecode (and hlboot.dat)","permalink":"/ModDocCE/files/hlboot"},"next":{"title":"hxbit/HXS Data (Save file payloads)","permalink":"/ModDocCE/files/hxbit"}}');var l=s(4848),n=s(8453);const d={sidebar_position:3},r="Save Files",h={},c=[{value:"Format",id:"format",level:2},{value:"File",id:"file",level:3},{value:"Header (PC version)",id:"header-pc-version",level:3},{value:"Header (mobile version)",id:"header-mobile-version",level:3},{value:"Flags",id:"flags",level:3},{value:"Payload",id:"payload",level:3},{value:"Chunk",id:"chunk",level:3},{value:"Chunk Formats",id:"chunk-formats",level:2},{value:"Date Chunk",id:"date-chunk",level:3},{value:"VersionNumber Chunk",id:"versionnumber-chunk",level:3},{value:"hxbit Data",id:"hxbit-data",level:2},{value:"Additional notes about saves from the mobile version",id:"additional-notes-about-saves-from-the-mobile-version",level:2}];function a(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"save-files",children:"Save Files"})}),"\n",(0,l.jsx)(t.p,{children:"This is Dead Cells' specific binary save file format. It stores multiple serialised objects in a compressed format along with hashes to prevent corruption or tampering."}),"\n",(0,l.jsx)(t.admonition,{type:"note",children:(0,l.jsxs)(t.p,{children:["All this information was obtained from ",(0,l.jsx)(t.code,{children:"f@34927 static tool.$Save.genSave (User, Bool) -> haxe.io.Bytes"})," - if you'd like to help out, try looking at this function yourself!"]})}),"\n",(0,l.jsx)(t.admonition,{type:"warning",children:(0,l.jsxs)(t.p,{children:["This is not complete! Although a partial reimplementation of hxbit is available in ",(0,l.jsx)(t.a,{href:"https://github.com/N3rdL0rd/hxbit.py",children:"hxbit.py"}),", this can only read - ",(0,l.jsx)(t.strong,{children:"not write"})," - save file data."]})}),"\n",(0,l.jsxs)(t.p,{children:["A working example of reading and writing a Dead Cells save file is available in ",(0,l.jsx)(t.code,{children:"alivecells"})," as ",(0,l.jsx)(t.a,{href:"https://github.com/N3rdL0rd/alivecells/blob/main/savetool.py",children:(0,l.jsx)(t.code,{children:"savetool.py"})}),"."]}),"\n",(0,l.jsx)(t.h2,{id:"format",children:"Format"}),"\n",(0,l.jsx)(t.h3,{id:"file",children:"File"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{children:"Size (bytes)"}),(0,l.jsx)(t.th,{children:"Name"}),(0,l.jsx)(t.th,{children:"Struct"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"59"}),(0,l.jsx)(t.td,{children:"Header"}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.a,{href:"#header",children:"Header"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"Variable"}),(0,l.jsx)(t.td,{children:"Payload"}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.a,{href:"#payload",children:"Payload"})})]})]})]}),"\n",(0,l.jsx)(t.h3,{id:"header-pc-version",children:"Header (PC version)"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{children:"Size (bytes)"}),(0,l.jsx)(t.th,{children:"Name"}),(0,l.jsx)(t.th,{children:"Description"}),(0,l.jsx)(t.th,{children:"Struct"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"4"}),(0,l.jsx)(t.td,{children:"Magic"}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.code,{children:"0xDEADCE11"})}),(0,l.jsx)(t.td,{children:"None"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"1"}),(0,l.jsx)(t.td,{children:"Version"}),(0,l.jsxs)(t.td,{children:["Current format version, usually ",(0,l.jsx)(t.code,{children:"1"})]}),(0,l.jsx)(t.td,{children:"Unsigned 8-bit integer"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"20"}),(0,l.jsx)(t.td,{children:"Checksum"}),(0,l.jsx)(t.td,{children:"SHA-1 raw hex digest of the file's contents, assuming these 20 bytes are 0x0 while taking the hash"}),(0,l.jsx)(t.td,{children:"None"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"20"}),(0,l.jsx)(t.td,{children:"Git hash"}),(0,l.jsx)(t.td,{children:"Current long commit hash of the game, as a hex digest"}),(0,l.jsx)(t.td,{children:"None"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"10"}),(0,l.jsx)(t.td,{children:"Build date"}),(0,l.jsx)(t.td,{children:"Build date of the game version creating this save file"}),(0,l.jsx)(t.td,{children:"UTF-8 string"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"4"}),(0,l.jsx)(t.td,{children:"Flags"}),(0,l.jsx)(t.td,{children:"Flags and metadata about the save file - mostly unknown"}),(0,l.jsx)(t.td,{children:"Flags"})]})]})]}),"\n",(0,l.jsx)(t.h3,{id:"header-mobile-version",children:"Header (mobile version)"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{children:"Size (bytes)"}),(0,l.jsx)(t.th,{children:"Name"}),(0,l.jsx)(t.th,{children:"Description"}),(0,l.jsx)(t.th,{children:"Struct"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"4"}),(0,l.jsx)(t.td,{children:"Magic"}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.code,{children:"0x20DEAD19"})}),(0,l.jsx)(t.td,{children:"None"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"1"}),(0,l.jsx)(t.td,{children:"Version"}),(0,l.jsxs)(t.td,{children:["Current format version, usually ",(0,l.jsx)(t.code,{children:"2"})]}),(0,l.jsx)(t.td,{children:"Unsigned 8-bit integer"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"20"}),(0,l.jsx)(t.td,{children:"Checksum"}),(0,l.jsx)(t.td,{children:"SHA-1 raw hex digest of the file's contents, assuming these 20 bytes are 0x0 while taking the hash"}),(0,l.jsx)(t.td,{children:"None"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"20"}),(0,l.jsx)(t.td,{children:"Git hash"}),(0,l.jsxs)(t.td,{children:["A value for each major version of the game, currently ",(0,l.jsx)(t.code,{children:"0000DEADCE110000000000000000000300500000"})]}),(0,l.jsx)(t.td,{children:"None"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"10"}),(0,l.jsx)(t.td,{children:"Build date"}),(0,l.jsx)(t.td,{children:"Build date of the game version creating this save file"}),(0,l.jsx)(t.td,{children:"UTF-8 string"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"4"}),(0,l.jsx)(t.td,{children:"Flags"}),(0,l.jsx)(t.td,{children:"Flags and metadata about the save file - mostly unknown"}),(0,l.jsx)(t.td,{children:"Flags"})]})]})]}),"\n",(0,l.jsx)(t.h3,{id:"flags",children:"Flags"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Bit"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Value (Dec)"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Value (Hex)"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"0"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"1"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"0x1"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"S_User"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"Data Chunk"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"If set, a chunk containing persistent user progress (unlocks, cells, gold) exists."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"1"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"2"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"0x2"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"S_Game"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"Data Chunk"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"If set, a chunk containing an in-progress run exists. If clear, the save was made from the main menu."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"2"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"4"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"0x4"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"S_UserAndGameData"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"Data Chunk"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"If set, a chunk containing general game metadata exists."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"3"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"8"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"0x8"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"S_Date"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"Data Chunk"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"If set, a chunk containing the 8-byte save timestamp exists."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"4"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"16"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"0x10"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"S_Experimental"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.em,{children:"Feature Flag"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"If set, the save was made while the game's experimental/beta features were enabled."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"5"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"32"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"0x20"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"S_UsesMods"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.em,{children:"Feature Flag"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["If set, the save was made with mods active. This is determined by checking if ",(0,l.jsx)(t.code,{children:"user.activeMods"})," is populated."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"6"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"64"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"0x40"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"S_HaveLore"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.em,{children:"Feature Flag"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"If set, indicates the save supports lore rooms. This flag is unconditionally set on all modern saves."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"7"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"128"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"0x80"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"S_VersionNumber"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"Data Chunk"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"If set, a chunk containing the 4-byte float game version exists."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"8"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"256"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"0x100"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"S_DLCMask"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.strong,{children:"Data Chunk"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"If set, a chunk containing the 4-byte integer bitmask of installed DLCs exists."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"9-31"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"-"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"-"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.em,{children:"Unused"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"-"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["These bits are currently unused but reserved for future expansion (which is unlikely). They are always ",(0,l.jsx)(t.code,{children:"0"}),"."]})]})]})]}),"\n",(0,l.jsx)(t.h3,{id:"payload",children:"Payload"}),"\n",(0,l.jsxs)(t.p,{children:["The payload is a Zlib-compressed blob that contains the actual save file - some of them are ",(0,l.jsx)(t.a,{href:"https://github.com/HeapsIO/hxbit",children:"hxbit"})," serialised data, and others are just raw bits and pieces. They follow the order of the data chunk flags that were set previously - basically, if a data chunk flag was ",(0,l.jsx)(t.code,{children:"1"}),", then the chunk is present in the save file. The payload is compressed with Zlib level 9 (maximum) compression. To manipulate it, read it as follows:"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Decompress the payload (it has headers, so any stock zlib implementation can handle it)"}),"\n",(0,l.jsx)(t.li,{children:"Figure out how many data chunks are enabled"}),"\n",(0,l.jsxs)(t.li,{children:["For each of those data chunks that's enabled, read a ",(0,l.jsx)(t.a,{href:"#chunk",children:"Chunk"})," from the payload blob, seeking forward in it as you do."]}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"chunk",children:"Chunk"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{children:"Size (bytes)"}),(0,l.jsx)(t.th,{children:"Name"}),(0,l.jsx)(t.th,{children:"Description"}),(0,l.jsx)(t.th,{children:"Struct"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"4"}),(0,l.jsx)(t.td,{children:"Size"}),(0,l.jsx)(t.td,{children:"Size of the contents"}),(0,l.jsx)(t.td,{children:"Unsigned 32-bit integer"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"Variable"}),(0,l.jsx)(t.td,{children:"Contents"}),(0,l.jsx)(t.td,{children:"Raw bytes of the save file chunk contents"}),(0,l.jsxs)(t.td,{children:["Varies, see ",(0,l.jsx)(t.a,{href:"#chunk-formats",children:"Chunk Formats"})]})]})]})]}),"\n",(0,l.jsx)(t.h2,{id:"chunk-formats",children:"Chunk Formats"}),"\n",(0,l.jsx)(t.p,{children:"Depending on what kind of data chunk you're reading, the format of its chunk in the save file changes. Here's a basic map:"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{children:"Bit"}),(0,l.jsx)(t.th,{children:"Name"}),(0,l.jsx)(t.th,{children:"Type"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"0"}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.code,{children:"S_User"})}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.a,{href:"#hxbit-data",children:"hxbit Data"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"1"}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.code,{children:"S_Game"})}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.a,{href:"#hxbit-data",children:"hxbit Data"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"2"}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.code,{children:"S_UserAndGameData"})}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.a,{href:"#hxbit-data",children:"hxbit Data"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"3"}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.code,{children:"S_Date"})}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.a,{href:"#date-chunk",children:"Date Chunk"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"7"}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.code,{children:"S_VersionNumber"})}),(0,l.jsx)(t.td,{children:(0,l.jsx)(t.a,{href:"#versionnumber-chunk",children:"VersionNumber Chunk"})})]})]})]}),"\n",(0,l.jsx)(t.h3,{id:"date-chunk",children:"Date Chunk"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{children:"Size (bytes)"}),(0,l.jsx)(t.th,{children:"Name"}),(0,l.jsx)(t.th,{children:"Description"}),(0,l.jsx)(t.th,{children:"Struct"})]})}),(0,l.jsx)(t.tbody,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"8"}),(0,l.jsx)(t.td,{children:"Date"}),(0,l.jsx)(t.td,{children:"Date of save file creation as a unix timestamp"}),(0,l.jsx)(t.td,{children:"Double"})]})})]}),"\n",(0,l.jsx)(t.h3,{id:"versionnumber-chunk",children:"VersionNumber Chunk"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{children:"Size (bytes)"}),(0,l.jsx)(t.th,{children:"Name"}),(0,l.jsx)(t.th,{children:"Description"}),(0,l.jsx)(t.th,{children:"Struct"})]})}),(0,l.jsx)(t.tbody,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"4"}),(0,l.jsx)(t.td,{children:"Version"}),(0,l.jsxs)(t.td,{children:["Major game version for this save file, eg ",(0,l.jsx)(t.code,{children:"34"})," or ",(0,l.jsx)(t.code,{children:"35"})]}),(0,l.jsx)(t.td,{children:"32-bit float"})]})})]}),"\n",(0,l.jsx)(t.h2,{id:"hxbit-data",children:"hxbit Data"}),"\n",(0,l.jsxs)(t.p,{children:["This data is serialised with help from ",(0,l.jsx)(t.a,{href:"https://github.com/HeapsIO/hxbit",children:"hxbit"})," - a Haxe library that enables serialisation of arbitrary objects to binary representations. This format has been partially reversed in ",(0,l.jsx)(t.a,{href:"https://github.com/N3rdL0rd/hxbit.py",children:"hxbit.py"}),"."]}),"\n",(0,l.jsxs)(t.p,{children:["See the ",(0,l.jsx)(t.a,{href:"./hxbit",children:"full page"})," for format specs."]}),"\n",(0,l.jsx)(t.h2,{id:"additional-notes-about-saves-from-the-mobile-version",children:"Additional notes about saves from the mobile version"}),"\n",(0,l.jsxs)(t.p,{children:["The chunks ",(0,l.jsx)(t.code,{children:"S_Game"})," and ",(0,l.jsx)(t.code,{children:"S_UserAndGameData"})," cannot be copied from a PC save to a mobile save, because mobile has no implementation of the Twitch integration features; those Twitch features are always referenced in those two chunks on a PC save even when they have not been activated, leading to a crash when trying to pass them on the mobile version."]}),"\n",(0,l.jsxs)(t.p,{children:["However, the ",(0,l.jsx)(t.code,{children:"S_User"})," chunk, which contains the meta progress of the save (including unlocked items), can be passed from a PC save to a mobile save."]})]})}function x(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>r});var i=s(6540);const l={},n=i.createContext(l);function d(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);